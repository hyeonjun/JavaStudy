* JSTL
	standard.jar / jstl.jar 필요 -> WebContent -> WEB-INF -> lib 폴더에 저장

JSTL 사용 목적
	JSP로 작업할 경우 HTML 내부 코드에 대한 가독성이 떨어지고,
	웹디자이너, 웹 퍼블리셔가 작업 시, 실수를 방지하기 위함

JSTL이 제공하는 다섯가지의 라이브러리
	1. Core : 출력, 제어문, 반복문
	2. XML : xml 문서를 읽여들여 데이터 추출 (톰캣이 web.xml 문서를 읽어서 실행 / Spring 환경 설정 파일 로드)
	3. Format : 출력 형식 관련(다국어)
	4. SQL : 쿼리를 태그 형태로 사용 (Spring의 영속 데이터베이스 : MyBatis)
	5. Functions : JSTL이 제공하는 함수 모음

JSTL 라이브러리 사용 방법
	taglib 지시자를 이용하여 어떤 라이브러리를 사용할 건지를 먼저 선언
	<%@ taglib uri="해당태그를 해석할 URL 주소" prefix="태그명에서 사용할 이름" %>
	
	예) Core 라이브러리를 사용할 경우
	<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
	<c:out></c:out>

1. Core : <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
	출력태그 : <c:out>
		<c:out value="출력값" default="기본값" escapeXml="true / false"
		escapeXml : 출력할 값 또는 기본값 내부에 HTML 태그가 포함되었을 경우,
		HTML 태그를 문자열로 출력할 것인지, HTML 태그를 컴파일할 것인지를 결정
		예) 출력할 값  : "테스트 결과는 <b>정상</b>입니다"
			테스트 결과는 <b>정상</b>입니다
			테스트 결과는 정상입니다
	
	변수 설정 태그 : <c:set>
		<c:set var="변수명" value="설정값" target="객체명" property="값" scope="변수선언위치">
	
	변수 제거 태그 : <c:remove>
		<c:remove var="제거할변수명" scope="변수선언위치">
	 
	예외처리 태그 : <c:catch>
		<c:catch var="변수명">
	
	제어문(if) : <c:if>
		<c:if test="조건" var="조건 처리 변수명" scope="범위">
	
	제어문(switch) : <c:choose>
		<c:choose>
			<c:when test="조건">처리내용</c:when>
			<c:otherwise>처리내용</c:otherwise>
		</c:choose>
	
	반복문(for) : <c:forEach>
		<c:forEach items="객체명" begin="시작인덱스" end="끝인덱스" step="증감식" var="변수명" varStatus="상태값변수">
	
	페이지 이동(response.sendRedirect()) : <c:redirect>
		<c:redirect url="이동페이지">
	
	파라미터 전달 태그 : <c:param>
		<c:param name="파라미터명" value="값">

========================================================================

<jsp:useBean id="변수명" class="사용할 자바빈 객체 경로"></jsp:useBean>
<jsp:useBean id="member" class="com.encore.beans.MemberBean"></jsp:useBean> <=> MemberBean member = new MemberBean();

<jsp:setProperty property="*" name="객체변수명"></jsp:setProperty>
property="*"와 같이 전달된 파라미터값을 자동 매핑시키려면,
1. 조건 : HTML이 전송하는 파라미터명과 MemberBean 내부의 멤버 변수 명이 반드시 일치해야한다.
	=> 해당 객체의 setter를 호출하여 값을 설정하는 태그

========================================================================

* JSP 파일을 이용하여 에러 페이지를 생성하는 방법

자바 웹 프로젝트에서 에러 페이지를 작성하는 이유
	사용자가 값을 잘못 입력했을 경우, 연산 오류가 발생하여 사용자 화면에 에러 코드 관련 페이지로 변경된다.
	별도의 에러 페이지를 만들어서 사용자에게 어떤 형태의 값을 입력하라고 알려줄 수 있도록 생성

1. 에러가 발생하는 페이지
	<%@ page errorPage="에러가 발생했을 경우 이동할 페이지" %>

2. 에러를 보여주는 페이지
	<%@ page isErrorPage="true" %>
	<% response.setStatus(200); %>
	<%= exception.getMessage() %>
	
=======================================================================

* 스프링 설치
	spring-tool-suite-3.8.4.RELEASE-e4.6.3-win32-x86_64.zip
	c:/ 에 복사 -> 압축 파일 여기에 풀기 -> sts-bundle -> sts-3.8.4.RELEASE -> STS.exe 파일을 관리자 권한으로 실행
	
	window 운영체제 : 전체경로명 256자까지만 인식되므로 워크스페이스 경로와 폴더명 조절 잘해야한다.
	
	Spring Framework : 범용
	대기업 / 정부 프로젝트 => Spring Framework 내부를 수정하여 사용
	
	Spring Framework => 새로운 프레임워크 개발 : 필요한 라이브러리를 다운로드
	
	Spring Framework => 사용 : 빠른 개발 (헤비)
	
	Spring Framework => Spring boot => 사용 : 모바일 연동(캐주얼)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	