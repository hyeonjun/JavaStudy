Servlet : extends HttpServlet
		  doGet() / doPost() -> 매개 변수(HttpServletRequest / HttpServletResponse)
		  
		  doGet() : 전송방식 get 방식일 경우 자동 호출
		  			form 태그 method='get' 또는 설정하지 않은 경우, 웹 주소줄을 통해 http://~~~/~~~/~~~.jsp?파티미터=값
		  			a 태그의 href 속성을 이용하여 링크를 사용할 경우
		  doPost() : 전송방식이 post 방식일 경우 자동 호출
		  			 form 태그 method="post" -> 웹 주소줄에 파라미터와 값이 보이지 않음
		  
		  (JSP or Servlet)에서 요청 시, 전달된 파라미터 값을 추출 : 내장 객체 request.getParameter("파라미터");
		  
		  HTML 태그에서 입력된 모든 값은 문자열로 전달된다.
		  
HTML => JSP : form 태그를 사용 / 웹 주소줄 / a 태그의 href 링크
			: 문자열로 전송

JSP <=> JSP : 객체 전송 가능
JSP <=> Servlet : 객체 전송 가능
 					-> request 객체(매개변수)에 객체(데이터)를 저장하여 전송
 
* Servlet 작동 순서
클라이언트가 Servlet에게 요청 -> 서버(톰캣)에서는 Servlet 컨테이너 생성 -> 요청이 있을때마다 스레드 생성

 - 참고 : 서버(SW / HW)는 기본적으로 다수에 대한 대응을 처리할 때 사용

* Servlet 라이프사이클(생명주기)
1. 최초 요청 시 , Servlet 객체 생성
2.		     init() 메서드 호출 : 서블릿 구동 직전에 처리해야할 일들...
3. service() / doGet(), doPost() 호출 : 요청 시 매번
4. destory() : 맨 마지막에 한번 호출 : 불필요한 자원들 해제(close())

HTML 태그와 Servlet (or JSP) 간의 데이터 교환 시,
post 방식일 경우 데이터를 받는 쪽에서 한글 데이터 인코딩을 재설정해야한다(깨짐).
 -> request.setCharacterEncoding("UTF-8"); => 필수 *
 
==========================================================================

* Servlet 등록 방법
1. @(어노테이션 이용) : @WebServlet("/hello")
				 : 이클립스 마법사를 이용하여 Servlet 클래스를 생성할 때, 설정 가능
				 : Servlet 클래스 생성 후, @WebServle("/hello")를 추가하여 설정도 가능
				 => hello 변경가능( 단, 서버 구동 중지 상태에서 해야한다)
   사용(요청) 방법 : @WebServlet("/hello")
   <form action="hello"> ~~~ </form>
   
   예) @WebServlet("/hello")
   <form action="heollo">~~~~</form> -> http://localhost:9000/프로젝트명/heollo 불가능(404)
   <form action="/heollo">~~~~</form> -> http://localhost:9000/heollo 불가능(404)
   <form action="/hello">~~~~</form> -> http://localhost:9000/hello : 불가능(404)
   <form action="hello">~~~~</form> -> -> http://localhost:9000/프로젝트명/hello : 가능(500 / 505 오류 시 서블릿 내부 오류 : 컴파일 오류 or 실행 오류)
   
  어노테이션의 단점 : 유지보수가 어렵다

2. web.xml 에 직접 등록하는 방법 : 수시로 변경가능
   즉, Java 원본 코드를 변경하지 않음, 유지보수가 용이
 
  단점 : 매번 개발자가 일일이 등록해야하고, web.xml 문서 내에 문제가 발생할 경우 프로젝트 구동이 안된다(404)
  
2-1. xml 문서 내에는 가급적 한글 주석을 사용하지 않는다.
	 xml 문서 내에 주석(comment) <!-- -->
	 
	 xml 문서의 첫 줄은 선언부로 시작 -> <?xml version="1.0" encoding="UTF-8"?>
	 
	 xmlns 는 xml namespace의 약어
	 xml은 기본적으로 태그를 제공하지 않고, 개발자가 태그를 생성하여 작성
	 톰캣에서는 web.xml 문서를 위한 xml 태그가 정의되어 있기 때문에 xml 태그를 해석하기 위한 namespace가 반드시 필요
	 
	 
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	 xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
	 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" 
	 id="WebApp_ID"
	 version="3.1"
	 
	 <display-name>20211101_Servlet(프로젝트명)</display-name>
	 톰캣이 애플리케이션을 구별할 때 사용되는 태그 : 생략 가능
	 
	 <welcom-file-list>
	 	<welcom-file>index.html</welcom-file>
	 </welcome-file-list>
	 사용자가 프로젝트명으로 요청했을 경우, 기본 페이지를 설정하는 부분

* web.xml 문서에 서블릿 등록
 <servlet></servlet>과 <servlet-mapping></servlet-mapping>은 한 쌍으로 하나의 servlet을 등록하기 위해서는 이 한 쌍을 만들줘야한다.
  
  <servlet>
  	<servlet-name>서블릿클래스의 아이디</servlet-name>
  	<servlet-class>서블릿 클래스의 풀네임(패키지 포함)</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>서블릿클래스의 아이디</servlet-name>
  	<url-pattern>/웹에서 요청할 서블릿 이름</url-pattern>
  </servlet-mapping>

서블릿 초기화 파라미터 : ServletConfig
	특정 Servlet이 생성될 때, 초기에 필요한 데이터들을 설정하는 방법
	1. 이클립스 마법사를 이용하여 서블릿 생성 시 설정하는 방법
	@WebServlet(
		urlPatterns = { "/initParam2" }, 
		initParams = { 
				@WebInitParam(name = "name", value = "홍길동"), 
				@WebInitParam(name = "phone", value = "01012341234")
		})
	
	2. web.xml 문서에 서블릿 등록할 때 설정하는 방법
	<servlet>
		<servlet-name></servlet-name>
		<servlet-class>/servlet-class>
  		<init-param>
  			<param-name>초기파라미터명</param-name>
  		  	<param-value>해당 값</param-value>
  		</init-param>
   </servlet>
   <servlet-mapping>
  		<servlet-name></servlet-name>
  		<url-pattern></url-pattern>
   </servlet-mapping>
   
   

서블릿 초기화 파라미터 추출하는 방법 : ServletConfig
	String 변수 = getInitParameer("초기 파라미터명");




















